services:
  postgres:
    build:
      context: ./database
    container_name: postgres_db
    restart: unless-stopped
    env_file:
      - ./.envs/.env.postgres.dev
    volumes:
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - postgres_data:/var/lib/postgresql/data
      - ./backend:/app:ro
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgbackup:
    image: prodrigestivill/postgres-backup-local:17
    restart: unless-stopped
    env_file:
      - ./.envs/.env.postgres.dev
    volumes:
      - ./backups:/backups
    networks: [backend]
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./.envs/.env.backend.dev
      - ./.envs/.env.postgres.dev
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks: [backend, frontend]
    command: uv run uvicorn src.main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    platform: linux/arm64
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./.envs/.env.frontend.dev
    environment:
      - NEXT_DISABLE_TURBOPACK=1
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    networks: [frontend]
    command: npm run dev
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s

  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./caddy/caddy_data:/data
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - frontend
      - backend

volumes:
  postgres_data:

networks:
  backend: {}
  frontend: {}
